- alias: "hoch odna rule"
  trigger:
    - seconds: /5
      platform: time_pattern

    - platform: state
      entity_id:
        - input_boolean.kitchen_btn
        - input_boolean.spalnya_btn
        - input_boolean.maysternya_btn
        - input_boolean.vanna_btn
        - input_boolean.velika_btn
        - input_boolean.ani_btn
        - input_boolean.koridor_btn

  action:
    entity_id:
      - input_boolean.hoch_odna
    service: >-
      {% if 
      is_state('input_boolean.kitchen_btn','on') or
      is_state('input_boolean.spalnya_btn','on') or
      is_state('input_boolean.maysternya_btn','on') or
      is_state('input_boolean.vanna_btn','on') or
      is_state('input_boolean.velika_btn','on') or
      is_state('input_boolean.ani_btn','on') or
      is_state('input_boolean.koridor_btn','on') 
       %}
      input_boolean.turn_on
      {% else %} 
      input_boolean.turn_off
      {% endif %}

- alias: "relay gazoviy kotel by timer"
  trigger:
    - seconds: /5
      platform: time_pattern

  action:
    entity_id:
      - switch.switch_d0
    service: >-
      {% if 
      is_state('input_boolean.kotel_haz_on_off','on') and
      is_state('input_boolean.hoch_odna','on') 
       %}
      switch.turn_on
      {% else %} 
      switch.turn_off
      {% endif %}

- alias: "relay elektichniy kotel by timer"
  trigger:
    - seconds: /5
      platform: time_pattern

  action:
    entity_id:
      - switch.switch_relay0
    service: >-
      {% if 
      is_state('input_boolean.kotel_elektrika_on_off','on') and
      is_state('input_boolean.hoch_odna','on') 
       %}
      switch.turn_on
      {% else %} 
      switch.turn_off
      {% endif %}

- alias: "sync kitchen"
  trigger:
    - platform: state
      entity_id:
        - input_boolean.kitchen_btn
  action:
    entity_id:
      - switch.switch_relay1
    service: >
      {% if is_state('input_boolean.kitchen_btn', 'on') %}
      switch.turn_on
      {% else %} 
      switch.turn_off 
      {% endif %}

- alias: "sync spalnya"
  trigger:
    - platform: state
      entity_id:
        - input_boolean.spalnya_btn
  action:
    entity_id:
      - switch.switch_relay2
    service: >
      {% if is_state('input_boolean.spalnya_btn', 'on') %}
      switch.turn_on
      {% else %} 
      switch.turn_off 
      {% endif %}

- alias: "sync maysternya"
  trigger:
    - platform: state
      entity_id:
        - input_boolean.maysternya_btn
  action:
    entity_id:
      - switch.switch_relay3
    service: >
      {% if is_state('input_boolean.maysternya_btn', 'on') %}
      switch.turn_on
      {% else %} 
      switch.turn_off 
      {% endif %}

- alias: "sync vanna"
  trigger:
    - platform: state
      entity_id:
        - input_boolean.vanna_btn
  action:
    entity_id:
      - switch.switch_relay4
    service: >
      {% if is_state('input_boolean.vanna_btn', 'on') %}
      switch.turn_on
      {% else %} 
      switch.turn_off 
      {% endif %}

- alias: "sync velika"
  trigger:
    - platform: state
      entity_id:
        - input_boolean.velika_btn
  action:
    entity_id:
      - switch.switch_relay5
    service: >
      {% if is_state('input_boolean.velika_btn', 'on') %}
      switch.turn_on
      {% else %} 
      switch.turn_off 
      {% endif %}

- alias: "sync ani"
  trigger:
    - platform: state
      entity_id:
        - input_boolean.ani_btn
  action:
    entity_id:
      - switch.switch_relay6
    service: >
      {% if is_state('input_boolean.ani_btn', 'on') %}
      switch.turn_on
      {% else %} 
      switch.turn_off 
      {% endif %}

- alias: "sync koridor"
  trigger:
    - platform: state
      entity_id:
        - input_boolean.koridor_btn
  action:
    entity_id:
      - switch.switch_relay7
    service: >
      {% if is_state('input_boolean.koridor_btn', 'on') %}
      switch.turn_on
      {% else %} 
      switch.turn_off 
      {% endif %}

- alias: "kitchen rule"
  trigger:
    - platform: state
      entity_id:
        - input_number.kitchen_night_max
        - input_number.kitchen_day_max
        - input_datetime.kitchen_start
        - input_datetime.kitchen_end
  action:
    entity_id:
      - input_boolean.kitchen_btn
    service: >
      {% set current_time = states('sensor.time')    %}
      {% set startTime = states('input_datetime.kitchen_start')   %}
      {% set endTime = states('input_datetime.kitchen_end')   %}
      {% if startTime < current_time and current_time < endTime %}
          {% if states('input_number.kitchen_day_max')|int > states('sensor.ble_temperature_kitchen')|int %}
          input_boolean.turn_on
          {% else %} 
          input_boolean.turn_off
          {% endif %}
      {% else %}     
          {% if states('input_number.kitchen_night_max')|int > states('sensor.ble_temperature_kitchen')|int %}
          input_boolean.turn_on
          {% else %} 
          input_boolean.turn_off
          {% endif %}
      {% endif %}

- alias: "spalnya rule"
  trigger:
    - platform: state
      entity_id:
        - input_number.spalnya_night_max
        - input_number.spalnya_day_max
        - input_datetime.spalnya_start
        - input_datetime.spalnya_end
  action:
    entity_id:
      - input_boolean.spalnya_btn
    service: >
      {% set current_time = states('sensor.time')    %}
      {% set startTime = states('input_datetime.spalnya_start')   %}
      {% set endTime = states('input_datetime.spalnya_end')   %}
      {% if startTime < current_time and current_time < endTime %}
          {% if states('input_number.spalnya_day_max')|int > states('sensor.ble_temperature_spalnya')|int %}
          input_boolean.turn_on
          {% else %} 
          input_boolean.turn_off
          {% endif %}
      {% else %}     
          {% if states('input_number.spalnya_night_max')|int > states('sensor.ble_temperature_spalnya')|int %}
          input_boolean.turn_on
          {% else %} 
          input_boolean.turn_off
          {% endif %}
      {% endif %}

- alias: "maysternya rule"
  trigger:
    - platform: state
      entity_id:
        - input_number.maysternya_night_max
        - input_number.maysternya_day_max
        - input_datetime.maysternya_start
        - input_datetime.maysternya_end
  action:
    entity_id:
      - input_boolean.maysternya_btn
    service: >
      {% set current_time = states('sensor.time')    %}
      {% set startTime = states('input_datetime.maysternya_start')   %}
      {% set endTime = states('input_datetime.maysternya_end')   %}
      {% if startTime < current_time and current_time < endTime %}
          {% if states('input_number.maysternya_day_max')|int > states('sensor.ble_temperature_maysternya')|int %}
          input_boolean.turn_on
          {% else %} 
          input_boolean.turn_off
          {% endif %}
      {% else %}     
          {% if states('input_number.maysternya_night_max')|int > states('sensor.ble_temperature_maysternya')|int %}
          input_boolean.turn_on
          {% else %} 
          input_boolean.turn_off
          {% endif %}
      {% endif %}

- alias: "vanna rule"
  trigger:
    - platform: state
      entity_id:
        - input_number.vanna_night_max
        - input_number.vanna_day_max
        - input_datetime.vanna_start
        - input_datetime.vanna_end
  action:
    entity_id:
      - input_boolean.vanna_btn
    service: >
      {% set current_time = states('sensor.time')    %}
      {% set startTime = states('input_datetime.vanna_start')   %}
      {% set endTime = states('input_datetime.vanna_end')   %}
      {% if startTime < current_time and current_time < endTime %}
          {% if states('input_number.vanna_day_max')|int > states('sensor.ble_temperature_vanna')|int %}
          input_boolean.turn_on
          {% else %} 
          input_boolean.turn_off
          {% endif %}
      {% else %}     
          {% if states('input_number.vanna_night_max')|int > states('sensor.ble_temperature_vanna')|int %}
          input_boolean.turn_on
          {% else %} 
          input_boolean.turn_off
          {% endif %}
      {% endif %}

- alias: "velika rule"
  trigger:
    - platform: state
      entity_id:
        - input_number.velika_night_max
        - input_number.velika_day_max
        - input_datetime.velika_start
        - input_datetime.velika_end
  action:
    entity_id:
      - input_boolean.velika_btn
    service: >
      {% set current_time = states('sensor.time')    %}
      {% set startTime = states('input_datetime.velika_start')   %}
      {% set endTime = states('input_datetime.velika_end')   %}
      {% if startTime < current_time and current_time < endTime %}
          {% if states('input_number.velika_day_max')|int > states('sensor.ble_temperature_velika')|int %}
          input_boolean.turn_on
          {% else %} 
          input_boolean.turn_off
          {% endif %}
      {% else %}     
          {% if states('input_number.velika_night_max')|int > states('sensor.ble_temperature_velika')|int %}
          input_boolean.turn_on
          {% else %} 
          input_boolean.turn_off
          {% endif %}
      {% endif %}

- alias: "ani rule"
  trigger:
    - platform: state
      entity_id:
        - input_number.ani_night_max
        - input_number.ani_day_max
        - input_datetime.ani_start
        - input_datetime.ani_end
  action:
    entity_id:
      - input_boolean.ani_btn
    service: >
      {% set current_time = states('sensor.time')    %}
      {% set startTime = states('input_datetime.ani_start')   %}
      {% set endTime = states('input_datetime.ani_end')   %}
      {% if startTime < current_time and current_time < endTime %}
          {% if states('input_number.ani_day_max')|int > states('sensor.ble_temperature_ani')|int %}
          input_boolean.turn_on
          {% else %} 
          input_boolean.turn_off
          {% endif %}
      {% else %}     
          {% if states('input_number.ani_night_max')|int > states('sensor.ble_temperature_ani')|int %}
          input_boolean.turn_on
          {% else %} 
          input_boolean.turn_off
          {% endif %}
      {% endif %}

- alias: "koridor rule"
  trigger:
    - platform: state
      entity_id:
        - input_number.koridor_night_max
        - input_number.koridor_day_max
        - input_datetime.koridor_start
        - input_datetime.koridor_end
  action:
    entity_id:
      - input_boolean.koridor_btn
    service: >
      {% set current_time = states('sensor.time')    %}
      {% set startTime = states('input_datetime.koridor_start')   %}
      {% set endTime = states('input_datetime.koridor_end')   %}
      {% if startTime < current_time and current_time < endTime %}
          {% if states('input_number.koridor_day_max')|int > states('sensor.ble_temperature_koridor')|int %}
          input_boolean.turn_on
          {% else %} 
          input_boolean.turn_off
          {% endif %}
      {% else %}     
          {% if states('input_number.koridor_night_max')|int > states('sensor.ble_temperature_koridor')|int %}
          input_boolean.turn_on
          {% else %} 
          input_boolean.turn_off
          {% endif %}
      {% endif %}
